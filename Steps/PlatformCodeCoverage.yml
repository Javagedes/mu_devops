parameters:
- name: build_file
  displayName: Platform Build File
  type: string
  default: ''
- name: ci_file
  displayName: CI File
  type: string
  default: '.pytool/CISettings.py'
- name: do_setup
  displayName: Run stuart_setup
  type: boolean
  default: false
- name: do_ci_setup
  displayName: Run stuart_ci_setup
  default: false
- name: do_update
  displayName: Run stuart_update
  type: boolean
  default: false
- name: active_platform
  displayName: Active Platform
  type: string
  default: ''
- name: extra_parse_args
  displayName: Extra Parse Args
  type: string
  default: ''
- name: package_name
  displayName: Package Name
  type: string
  default: ''
- name: extra_coverage_args
  displayName: Extra Coverage Report Arguments
  type: string
  default: ''

steps:
# Parse the environment
- script: stuart_parse -c ${{ parameters.build_file }} ${{ paramters.extra_parse_args }}
  displayName: Parse Active Environment

# Setup the environment for a stuart_ci_build to compile and run host based unit tests
- ${{ if eq(parameters.do_setup, true) }}:
  - script: stuart_setup -c ${{ parameters.ci_file }}
    displayName: Setup Active Environment
- ${{ if eq(parameters.do_ci_setup, true) }}:
  - script: stuart_ci_setup -c ${{ parameters.ci_file }}
    displayName: Setup CI Environment
- ${{ if eq(parameters.do_update, true) }}:
  - script: stuart_update -c ${{ parameters.ci_file }}
    displayName: Update Active Environment
- script: stuart_ci_build -c ${{ parameters.ci_file }} -p ${{ parameters.package_name }} -t NOOPT CODE_COVERAGE=TRUE
  displayName: Build Active Environment

# Take the coverage report generated by stuart_ci_build and convert it to a platform specific report
- script: stuart_report coverage Build/coverage.xml --by-platform --dsc ${{ parameters.active_platform }} ${{ parameters.extra_coverage_args }}
  displayName: Generate Coverage Report
